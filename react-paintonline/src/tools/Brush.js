import Tool from "./Tool";

// создаем и экспортируем класс Brush,который расширяет(то есть наследуется) наш класс Tool,то есть наш класс Brush будет иметь те же переменные и методы(функции),что имеет наш класс Tool,а также дополнительный переменные и методы,которые мы укажем здесь у этого класса Brush
export default class Brush extends Tool{

    // создаем конструктор,у которого будет параметр canvas,socket(вебсокет),id(типа id сессии,то есть id текущего подключения к вебсокет серверу)
    constructor(canvas,socket,id){

        super(canvas,socket,id); // super() вызывает конструктор родительского класса(то есть в данном случае вызывает конструктор нашего класса Tool),куда передаем параметры canvas,socket,id конструктора этого класса Brush

        this.listen(); // вызываем нашу функцию listen(),то есть после создания объекта на основе этого класса Brush,наш canvas будет слушать все эти функции(типа прослушивать события,которые мы указали в функции listen)

    }

    // создаем функцию,в которой будем добавлять слушатели событий на наш канвас
    listen(){

        this.canvas.onmousemove = this.mouseMoveHandler.bind(this); // при событии onmouseMove(то есть когда пользователь будет двигать мышкой) присваеваем нашу функцию mouseMoveHandler,которую биндим( bind() ) к текущему контексту,чтобы мы могли обращаться в этой нашей функции к this

        this.canvas.onmousedown = this.mouseDownHandler.bind(this);

        this.canvas.onmouseup = this.mouseUpHandler.bind(this);

    }

    // создаем метод(функцию),которая будет отрабатывать,когда пользователь отпустил мышку с канваса,параметром принимает e,то есть это будет ссылка на канвас
    mouseUpHandler(e){
        
        this.mouseDown = false; // указываем полю mouseDown у этого класса значение как false,то есть типа кнопка мыши отпущена(когда пользователь отпустит нажатие кнопки мыши)

        // отправляем на вебсокет сервер сообщение,то есть объект,обернутый в JSON.stringify(),так как обмен сообщениями с вебсокет сервером происходит в формате строки,отправляем этот объект,чтобы остальные участники сессии(текущего подключения к вебсокет серверу по определенному id) могли увидеть то,что сейчас рисуется
        this.socket.send(JSON.stringify({

            method:'draw',

            id:this.id,

            // указываем объект фигуры,которую будем рисовать
            figure:{

                type:'finish', // указываем тип этой фигуры,в данном случае 'finish',то есть закончили рисовать фигуру,когда отпустили кнопку мыши

            }

        }))

    }

    // создаем метод(функцию),которая будет отрабатывать,когда пользователь нажал мышку на канвасе,параметром принимает e,то есть это будет ссылка на канвас
    mouseDownHandler(e){
        
        this.mouseDown = true; // указываем полю mouseDown у этого класса значение как true,то есть типа кнопка мыши нажата

        this.ctx.beginPath(); // вызываем метод beginPath() у нашей переменной ctx(контекст канваса),которую создавали в классе Tool,beginPath() говорит о том,что мы начали рисовать новую линию

        this.ctx.moveTo(e.pageX - e.target.offsetLeft, e.pageY - e.target.offsetTop); // moveTo() - указываем,что мы переместили курсор мыши,первым параметром в moveTo() указываем координату x,а вторым y,то есть в какие координаты x и y нужно переместить курсор мыши, указываем для координаты x,из координаты мыши относительно страницы по координате x(e.pageX) мы отнимает левый отступ канваса от края страницы(e.target.offsetLeft), для координаты y делаем тоже самое,,из координаты мыши относительно страницы по координате y(e.pageY) отнимаем  верхний отступ канваса от края страницы(e.target.offsetTop),то есть на этом этапе мы перевели курсор мыши,где будет рисоваться линия и знаем эти координаты,таким образом получаем координаты курсора мыши,чтобы правильно рисовать линию

    }

    // создаем метод(функцию),которая будет отрабатывать,когда пользователь двигает мышку на канвасе
    mouseMoveHandler(e){
        
        // если поле mouseDown у этого класса true,то будем рисовать
        if(this.mouseDown){

            // закомментировали этот код,так как теперь отправляем сообщение на вебсокет сервер вместо этого
            // this.draw(e.pageX - e.target.offsetLeft, e.pageY - e.target.offsetTop); // вызываем нашу функцию draw() у этого класса,первым параметром указываем координату x,а вторым y,то есть в какие координаты x и y нужно переместить курсор мыши, указываем для координаты x,из координаты мыши относительно страницы по координате x(e.pageX) мы отнимает левый отступ канваса от края страницы(e.target.offsetLeft), для координаты y делаем тоже самое,из координаты мыши относительно страницы по координате y(e.pageY) отнимаем  верхний отступ канваса от края страницы(e.target.offsetTop),таким образом получаем координаты курсора мыши,чтобы правильно рисовать линию

            // отправляем на вебсокет сервер сообщение,то есть объект,обернутый в JSON.stringify(),так как обмен сообщениями с вебсокет сервером происходит в формате строки,отправляем этот объект,чтобы остальные участники сессии(текущего подключения к вебсокет серверу по определенному id) могли увидеть то,что сейчас рисуется
            this.socket.send(JSON.stringify({

                method:'draw',

                id:this.id,

                // указываем объект фигуры,которую будем рисовать
                figure:{

                    type:'brush', // указываем тип этой фигуры,в данном случае 'brush' (кисть)

                    x: e.pageX - e.target.offsetLeft, // указываем координату по x,чтобы рисовать кистью от начала этой координаты,из координаты мыши относительно страницы по координате x(e.pageX) мы отнимает левый отступ канваса от края страницы(e.target.offsetLeft)

                    y: e.pageY - e.target.offsetTop, // указываем координату по y,чтобы рисовать кистью от начала этой координаты,из координаты мыши относительно страницы по координате y(e.pageY) отнимаем  верхний отступ канваса от края страницы(e.target.offsetTop)

                }

            }))

        }

    }

    // создаем функцию draw для рисования кисти,указываем ей static,чтобы можно было ее использовать без создания этого класса Brush,в параметрах она принимает ctx(контекст), x и y,типа координаты той линии,которую будем рисовать
    static draw(ctx, x, y) {

        ctx.lineTo(x, y); // вызываем метод lineTo() у ctx(переменная контекста канваса,то есть параметр этой функции draw),в которую передаем координаты x и y(параметры этой функции draw()),lineTo() - рисует линию с текущей позиции курсора мыши до позиции по координатам x и y,которые передаем параметрами в lineTo()

        ctx.stroke(); // чтобы эта линия имела цвет,вызываем функцию stroke(),типа контекст обведет эту линию

        console.log('draw')

    }

}