
// создаем и экспортируем класс Tool,который будет родительским от каждого инструмента
export default class Tool {

    // создаем конструктор,у которого будет параметр canvas,socket(вебсокет),id(типа id сессии,то есть id текущего подключения к вебсокет серверу)
    constructor(canvas,socket,id){
        
        this.canvas = canvas; // указываем значение поля canvas у этого класса(this) как параметр этого конструктора canvas

        this.socket = socket; // указываем значение поля socket у этого класса(this) как параметр этого конструктора socket

        this.id = id; // указываем значение поля id у этого класса(this) как параметр этого конструктора id

        this.ctx = canvas.getContext('2d'); // указываем значение поля ctx у этого класса(this) как параметр этого конструктора canvas.getContext('2d'),этот getContext() типа объект,который позволяет производить манипуляции на канвасе(canvas),типа оставлять линии,рисовать фигуры и тд,указываем '2d' в getContext(),чтобы указать,что этот канвас взаимодействует с 2d объектами,так как канвас может взаимодействовать и с 3d объектами

        this.destroyEvents(); // вызываем нашу функцию destroyEvents(),то есть после создания объекта на основе этого класса Tool будет отработана эта функция destroyEvents()

    }

    // создаем функцию сеттер(с помощью set),то есть функцию,которая будет как-то кастомно менять значение
    set fillColor(color){

        this.ctx.fillStyle = color; // изменяем цвет заполнения фигуры(fillStyle) у ctx(контекста канваса) на значение color(параметр этой функции fillColor)

    }

    // создаем функцию сеттер(с помощью set),то есть функцию,которая будет как-то кастомно менять значение,в данном случае для цвета обводки
    set strokeColor(color){

        this.ctx.strokeStyle = color; // изменяем цвет обводки фигуры(strokeStyle) у ctx(контекста канваса) на значение color(параметр этой функции strokeColor)

    }

    // создаем функцию сеттер(с помощью set),то есть функцию,которая будет как-то кастомно менять значение,в данном случае для толщины линии
    set lineWidth(width){

        this.ctx.lineWidth = width; // изменяем толщину линии фигуры(lineWidth) у ctx(контекста канваса) на значение width(параметр этой функции lineWidth)

    }

    // создаем функцию,которая обнуляет все слушатели событий нашего канваса,чтобы например,когда мы рисовали кистью,а потом использовали другой инструмент,то эти слушатели событий для кисти убирались с канваса,так как там может быть другая логика
    destroyEvents(){

        this.canvas.onmousemove = null; // указываем слушателю onmousemove у нашего канваса(canvas) на значение null

        this.canvas.onmousedown = null;

        this.canvas.onmouseup = null;

    }

}